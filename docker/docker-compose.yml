version: '3.9'
services:
    # configuration manager for NiFi
    zookeeper:
        hostname: myzookeeper
        container_name: zookeeper_container
        image: 'bitnami/zookeeper:3.7.0'
        # to see crashes when debugging
        # restart: on-failure
        environment:
            - ALLOW_ANONYMOUS_LOGIN=yes
        networks:
            - nifi
    # version control for nifi flows
    registry:
        hostname: myregistry
        container_name: registry_container
        image: 'apache/nifi-registry:1.19.0'
        # to see crashes when debugging
        # restart: on-failure
        ports:
            - "18080:18080"
        environment:
            - LOG_LEVEL=INFO
            - NIFI_REGISTRY_DB_DIR=/opt/nifi-registry/nifi-registry-current/database
            - NIFI_REGISTRY_FLOW_PROVIDER=file
            - NIFI_REGISTRY_FLOW_STORAGE_DIR=/opt/nifi-registry/nifi-registry-current/flow_storage
        volumes:
            - ./file_share/nifi_registry/database:/opt/nifi-registry/nifi-registry-current/database
            - ./file_share/nifi_registry/flow_storage:/opt/nifi-registry/nifi-registry-current/flow_storage
        networks:
            - nifi

    # data extraction, transformation and load service
    nifi:
        hostname: nifi
        container_name: nifi_container
        image: 'apache/nifi:1.19.0'
        # to see crashes when debugging
        # restart: on-failure
        ports:
            - '8091:8080'
        environment:
            - NIFI_WEB_HTTP_PORT=8080
            - NIFI_CLUSTER_IS_NODE=true
            - NIFI_CLUSTER_NODE_PROTOCOL_PORT=8082
            - NIFI_ZK_CONNECT_STRING=myzookeeper:2181
            - NIFI_ELECTION_MAX_WAIT=30 sec
            - NIFI_SENSITIVE_PROPS_KEY='12345678901234567890A'
        healthcheck:
            test: "${DOCKER_HEALTHCHECK_TEST:-curl localhost:8091/nifi/}"
            interval: "60s"
            timeout: "3s"
            start_period: "5s"
            retries: 5
        volumes:
            - ./file_share/nifi/database_repository:/opt/nifi/nifi-current/database_repository
            - ./file_share/nifi/flowfile_repository:/opt/nifi/nifi-current/flowfile_repository
            - ./file_share/nifi/content_repository:/opt/nifi/nifi-current/content_repository
            - ./file_share/nifi/provenance_repository:/opt/nifi/nifi-current/provenance_repository
            - ./file_share/nifi/state:/opt/nifi/nifi-current/state
            - ./file_share/nifi/logs:/opt/nifi/nifi-current/logs
            # uncomment the next line after copying the /conf directory from the container to your local directory to persist NiFi flows
            #- ./nifi/conf:/opt/nifi/nifi-current/conf
        networks:
            - nifi
    # python IDE in container
    jupyter:
        hostname: jupyter
        container_name: jupyter_container
        build:
            #path to docker files folder
            context: ./docker_files/jupyter
            #docker file name for jupyter in docker files folder
            dockerfile: dockerfile_jupyter
        volumes:
            #path to file share
            - ./file_share/jupyter_data/:/home/jovyan/
        ports:
            - '8888:8888'
        networks:
            - nifi

    # DWH postgresSQL
    postgres:
        hostname: dwh_postgres
        container_name: dwh_postgres_container
        build:
            #path to docker files folder
            context: ./docker_files/dwh_postgresql
            #docker file name for dwh in docker files folder
            dockerfile: dockerfile_dwh_postgresql
        volumes:
            #path to file share
            - ./file_share/dwh_postgresql_data/:/var/lib/postgresql/data
        #set the DB name, user and password
        environment:
            POSTGRES_DB: 'dwh_postgres_db'
            POSTGRES_USER: 'dwh_postgres'
            POSTGRES_PASSWORD: 'dwh_postgres'
        ports:
            - '5432:5432'
        networks:
            - nifi

    # pgadmin
    pgadmin:
        hostname: pgadmin
        container_name: pgadmin_container
        build:
            #path to docker files folder
            context: ./docker_files/pgadmin
            #docker file name for pgadmin in docker files folder
            dockerfile: dockerfile_pgadmin
        environment:
            PGADMIN_DEFAULT_EMAIL: "pgadmin@default.com"
            PGADMIN_DEFAULT_PASSWORD: "pgadminpswrd"
            PGADMIN_CONFIG_SERVER_MODE: "False"
        #path to file share
        volumes:
            - ./file_share/pgadmin_data/:/var/lib/pgadmin
        ports:
            - '5050:80'
        networks:
            - nifi

networks:
  nifi:
    driver: bridge